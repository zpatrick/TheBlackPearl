package stores

// Automatically generated by go-sdata. DO NOT EDIT!

import (
	"encoding/json"
	"github.com/zpatrick/TheBlackPearl/api/models"
	"github.com/zpatrick/go-sdata/container"
)

type MovieStore struct {
	container container.Container
	table     string
}

func NewMovieStore(container container.Container) *MovieStore {
	return &MovieStore{
		container: container,
		table:     "models.Movie",
	}
}

func (this *MovieStore) Init() error {
	return this.container.Init(this.table)
}

type MovieStoreInsert struct {
	*MovieStore
	data *models.Movie
}

func (this *MovieStore) Insert(data *models.Movie) *MovieStoreInsert {
	return &MovieStoreInsert{
		MovieStore: this,
		data:       data,
	}
}

func (this *MovieStoreInsert) Execute() error {
	bytes, err := json.Marshal(this.data)
	if err != nil {
		return err
	}

	return this.container.Insert(this.table, this.data.ID, bytes)
}

type MovieStoreSelectAll struct {
	*MovieStore
	filter MovieFilter
}

func (this *MovieStore) SelectAll() *MovieStoreSelectAll {
	return &MovieStoreSelectAll{
		MovieStore: this,
	}
}

type MovieFilter func(*models.Movie) bool

func (this *MovieStoreSelectAll) Where(filter MovieFilter) *MovieStoreSelectAll {
	this.filter = filter
	return this
}

func (this *MovieStoreSelectAll) Execute() ([]*models.Movie, error) {
	data, err := this.container.SelectAll(this.table)
	if err != nil {
		return nil, err
	}

	results := []*models.Movie{}
	for _, d := range data {
		var value *models.Movie

		if err := json.Unmarshal(d, &value); err != nil {
			return nil, err
		}

		if this.filter == nil || this.filter(value) {
			results = append(results, value)
		}
	}

	return results, nil
}

type MovieStoreSelectFirst struct {
	*MovieStoreSelectAll
}

func (this *MovieStoreSelectAll) FirstOrNil() *MovieStoreSelectFirst {
	return &MovieStoreSelectFirst{
		MovieStoreSelectAll: this,
	}
}

func (this *MovieStoreSelectFirst) Execute() (*models.Movie, error) {
	results, err := this.MovieStoreSelectAll.Execute()
	if err != nil {
		return nil, err
	}

	if len(results) > 0 {
		return results[0], nil
	}

	return nil, nil
}

type MovieStoreDelete struct {
	*MovieStore
	key string
}

func (this *MovieStore) Delete(key string) *MovieStoreDelete {
	return &MovieStoreDelete{
		MovieStore: this,
		key:        key,
	}
}

func (this *MovieStoreDelete) Execute() (bool, error) {
	return this.container.Delete(this.table, this.key)
}
